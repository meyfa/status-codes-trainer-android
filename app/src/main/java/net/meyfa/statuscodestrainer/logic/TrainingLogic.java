package net.meyfa.statuscodestrainer.logic;

import android.support.annotation.NonNull;

import net.meyfa.statuscodestrainer.data.HTTPStatus;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;

/**
 * Logic for generating training questions.
 */
public class TrainingLogic
{
    private static final int ANSWER_COUNT = 3;

    private final Random rand;

    private final List<String> possibleAnswers;
    private final List<HTTPStatus> statuses;
    private int nextIndex;

    /**
     * @param statuses The statuses to ask about. These are also the exclusive source for answer options.
     */
    public TrainingLogic(@NonNull List<HTTPStatus> statuses)
    {
        this.rand = new Random(System.nanoTime());

        // ask questions in random order
        this.statuses = new ArrayList<>(statuses);
        Collections.shuffle(this.statuses, rand);

        // setup answer options to pick from
        this.possibleAnswers = new ArrayList<>();
        for (HTTPStatus status : this.statuses) {
            this.possibleAnswers.add(status.getMessage());
        }
        if (possibleAnswers.size() < ANSWER_COUNT) {
            throw new IllegalArgumentException("too few options for answer generation, need at least" + ANSWER_COUNT);
        }

        // set start position
        this.nextIndex = 0;
    }

    /**
     * @return Whether another question can be generated by a call to {@link #nextQuestion()}.
     */
    public boolean hasNextQuestion()
    {
        return nextIndex < statuses.size();
    }

    /**
     * Generates a new question, if possible. Prior to this, you should check whether more questions are available by
     * querying {@link #hasNextQuestion()}.
     *
     * @return
     */
    public TrainingQuestion nextQuestion()
    {
        if (!hasNextQuestion()) {
            throw new IllegalStateException("no more questions");
        }
        // use status at current index, then increment that index
        return constructQuestion(statuses.get(nextIndex++));
    }

    /**
     * Construct a question for the given status.
     *
     * @param status The status.
     * @return A question that asks about the status's code.
     */
    private TrainingQuestion constructQuestion(HTTPStatus status)
    {
        List<String> answers = new ArrayList<>();

        // generate random set of false answers
        while (answers.size() < ANSWER_COUNT - 1) {
            String falseAnswer = possibleAnswers.get(rand.nextInt(possibleAnswers.size()));
            if (answers.contains(falseAnswer) || falseAnswer.equals(status.getMessage())) {
                continue;
            }
            answers.add(falseAnswer);
        }

        // add correct answer at random position
        int correctAnswerIndex = rand.nextInt(ANSWER_COUNT);
        answers.add(correctAnswerIndex, status.getMessage());

        return new TrainingQuestion(status.getCode(), answers, correctAnswerIndex);
    }
}
